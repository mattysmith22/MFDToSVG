{-|
Module      : Arma.Config
Description : Arma Config types and utilities for reading from arma values
-}
{-# LANGUAGE RecordWildCards #-}
module Arma.Config where

import           Arma.Value
import           Data.Map                      as Map
import           Data.Map                       ( Map )
import           Data.Text                      ( Text )
import Data.Aeson

-- | Single level of a config
data Config = Config
  { properties :: [(Text, ArmaValue)]
  , subClasses :: [(Text, Config)]
  }
  deriving (Show, Eq)

instance ToJSON Config where
  toJSON Config{..} = toJSON $ (toJSON <$> Map.fromList properties) <> (toJSON <$> Map.fromList subClasses)

-- | Error that can occur when reading a config from an Arma value
data ConfigError = InvalidConfigType
    | InvalidConfigLength
    | InvalidProperty
    | InvalidSubClass
    deriving (Show, Eq)

-- | Reads a config from an arma value, generated by mbs_fnc_exportConfig.
fromArmaValue :: ArmaValue -> Either ConfigError Config
fromArmaValue (ArmaArray [ArmaArray rawProperties, ArmaArray rawSubClasses]) =
  Config <$> propertiesMapE <*> subClassesMapE
 where
  propertiesMapE = mapM parseProperty rawProperties

  parseProperty (ArmaArray [ArmaString key, value]) = Right (key, value)
  parseProperty _ = Left InvalidProperty

  subClassesMapE = mapM parseSubClass rawSubClasses

  parseSubClass (ArmaArray [ArmaString key, rawSubClass]) = do
    subClass <- fromArmaValue rawSubClass
    return (key, subClass)
  parseSubClass _ = Left InvalidSubClass
fromArmaValue (ArmaArray _) = Left InvalidConfigLength
fromArmaValue _             = Left InvalidConfigType
